export const API_BASE_URL = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';

// Types
export interface JobRole {
  id: number;
  job_role_name: string;
  description: string | null;
  category_id: number;
  subcategory_id: number;
  active: boolean;
  created_at: string;
  created_by: number;
  updated_at: string | null;
  updated_by: number | null;
}

export interface Skill {
  id: number;
  skill_name: string;
  description: string | null;
  category_id: number;
  subcategory_id: number;
  active: boolean;
  created_at: string;
  created_by: number;
  updated_at: string | null;
  updated_by: number | null;
}

export interface CourseSubcategory {
  id: number;
  name: string;
  category_id: number;
  is_flagship: boolean;
  active: boolean;
  created_at: string;
  created_by: number | null;
  updated_at: string | null;
  updated_by: number | null;
}

export interface CourseCategory {
  id: number;
  name: string;
  is_flagship: boolean;
  is_IT: boolean;
  active: boolean;
  created_at: string;
  created_by: number | null;
  updated_at: string | null;
  updated_by: number | null;
}

export interface CreateJobRoleRequest {
  job_role_name: string;
  description?: string;
  category_id: number;
  subcategory_id: number;
  active: boolean;
  created_by: number;
}

export interface CreateSkillRequest {
  skill_name: string;
  description?: string;
  category_id: number;
  subcategory_id: number;
  active: boolean;
  created_by: number;
}

export interface CreateCourseSubcategoryRequest {
  name: string;
  category_id: number;
  is_flagship?: boolean;
  active?: boolean;
  created_by?: number;
}

export interface UpdateJobRoleRequest {
  job_role_name?: string;
  description?: string;
  category_id?: number;
  subcategory_id?: number;
  active?: boolean;
  updated_by: number;
}

export interface UpdateSkillRequest {
  skill_name?: string;
  description?: string;
  category_id?: number;
  subcategory_id?: number;
  active?: boolean;
  updated_by: number;
}

export interface UpdateCourseSubcategoryRequest {
  name?: string;
  category_id?: number;
  is_flagship?: boolean;
  active?: boolean;
  updated_by?: number;
}

// Onboarding Progress Types
export interface OnboardingProgress {
  session_id: string;  // UUID
  step_number: number;
  data: any;  // JSON object
  user_id?: string | null;  // UUID
  created_at?: string;  // datetime
  updated_at?: string;  // datetime
}

export interface CreateOnboardingProgressRequest {
  session_id: string;           // Required - UUID generated by frontend
  step_number?: number | null;  // Optional
  data?: any;                   // Optional
  user_id?: string | null;      // Optional
}

export interface UpdateOnboardingProgressRequest {
  session_id: string;           // Should match URL parameter
  step_number?: number | null;  // Optional
  data?: any;                   // Optional
  user_id?: string | null;      // Optional
}

export interface OnboardingProgressResponse extends OnboardingProgress {}

const API_ENDPOINTS = {
  courseCategories: {
    base: '/api/v1/coursecategories',
    getAll: '/api/v1/coursecategories',
    getById: (id: number) => `/api/v1/coursecategories/${id}`,
  },
  jobRoles: {
    base: '/api/v1/job-roles',
    getAll: '/api/v1/job-roles',
    getById: (id: number) => `/api/v1/job-roles/${id}`,
    create: '/api/v1/job-roles',
    update: (id: number) => `/api/v1/job-roles/${id}`,
    delete: (id: number) => `/api/v1/job-roles/${id}`,
  },
  skills: {
    base: '/api/v1/skills',
    getAll: '/api/v1/skills',
    getById: (id: number) => `/api/v1/skills/${id}`,
    create: '/api/v1/skills',
    update: (id: number) => `/api/v1/skills/${id}`,
    delete: (id: number) => `/api/v1/skills/${id}`,
  },
  courseSubcategories: {
    base: '/api/v1/coursesubcategories',
    getAll: '/api/v1/coursesubcategories',
    getById: (id: number) => `/api/v1/coursesubcategories/${id}`,
    create: '/api/v1/coursesubcategories',
    update: (id: number) => `/api/v1/coursesubcategories/${id}`,
    delete: (id: number) => `/api/v1/coursesubcategories/${id}`,
  },
  onboarding: {
    base: '/api/v1/onboarding',
    create: '/api/v1/onboarding',
    getBySessionId: (sessionId: string) => `/api/v1/onboarding/${sessionId}`,
    update: (sessionId: string) => `/api/v1/onboarding/${sessionId}`,
    delete: (sessionId: string) => `/api/v1/onboarding/${sessionId}`,
    getByUserId: (userId: string) => `/api/v1/onboarding/user/${userId}`,
    getAll: '/api/v1/onboarding'
  }
};

// API Client
class OnboardingApiClient {
  private async fetchApi<T>(endpoint: string, options?: RequestInit): Promise<T> {
    const url = `${API_BASE_URL}${endpoint}`;
    console.log('Making API request to:', url, {
      method: options?.method || 'GET',
      headers: options?.headers,
      body: options?.body ? JSON.parse(options.body as string) : undefined
    });

    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        ...options?.headers,
      },
    });

    const responseText = await response.text();
    const responseData = responseText ? JSON.parse(responseText) : null;

    if (!response.ok) {
      console.error('API request failed:', {
        url,
        status: response.status,
        statusText: response.statusText,
        error: responseData,
        requestBody: options?.body ? JSON.parse(options.body as string) : undefined
      });
      throw new Error(responseData?.detail || 'API request failed');
    }

    console.log('API response:', responseData);
    return responseData;
  }

  // Course Categories
  async getAllCourseCategories(): Promise<CourseCategory[]> {
    return this.fetchApi<CourseCategory[]>(API_ENDPOINTS.courseCategories.getAll);
  }

  async getCourseCategoryById(id: number): Promise<CourseCategory> {
    return this.fetchApi<CourseCategory>(API_ENDPOINTS.courseCategories.getById(id));
  }

  // Job Roles
  async getAllJobRoles(): Promise<JobRole[]> {
    return this.fetchApi<JobRole[]>(API_ENDPOINTS.jobRoles.getAll);
  }

  async getJobRoleById(id: number): Promise<JobRole> {
    return this.fetchApi<JobRole>(API_ENDPOINTS.jobRoles.getById(id));
  }

  async createJobRole(data: CreateJobRoleRequest): Promise<JobRole> {
    return this.fetchApi<JobRole>(API_ENDPOINTS.jobRoles.create, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateJobRole(id: number, data: UpdateJobRoleRequest): Promise<JobRole> {
    return this.fetchApi<JobRole>(API_ENDPOINTS.jobRoles.update(id), {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async deleteJobRole(id: number): Promise<JobRole> {
    return this.fetchApi<JobRole>(API_ENDPOINTS.jobRoles.delete(id), {
      method: 'DELETE',
    });
  }

  // Skills
  async getAllSkills(): Promise<Skill[]> {
    return this.fetchApi<Skill[]>(API_ENDPOINTS.skills.getAll);
  }

  async getSkillById(id: number): Promise<Skill> {
    return this.fetchApi<Skill>(API_ENDPOINTS.skills.getById(id));
  }

  async createSkill(data: CreateSkillRequest): Promise<Skill> {
    return this.fetchApi<Skill>(API_ENDPOINTS.skills.create, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateSkill(id: number, data: UpdateSkillRequest): Promise<Skill> {
    return this.fetchApi<Skill>(API_ENDPOINTS.skills.update(id), {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async deleteSkill(id: number): Promise<Skill> {
    return this.fetchApi<Skill>(API_ENDPOINTS.skills.delete(id), {
      method: 'DELETE',
    });
  }

  // Course Subcategories
  async getAllCourseSubcategories(): Promise<CourseSubcategory[]> {
    return this.fetchApi<CourseSubcategory[]>(API_ENDPOINTS.courseSubcategories.getAll);
  }

  async getCourseSubcategoryById(id: number): Promise<CourseSubcategory> {
    return this.fetchApi<CourseSubcategory>(API_ENDPOINTS.courseSubcategories.getById(id));
  }

  async createCourseSubcategory(data: CreateCourseSubcategoryRequest): Promise<CourseSubcategory> {
    return this.fetchApi<CourseSubcategory>(API_ENDPOINTS.courseSubcategories.create, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updateCourseSubcategory(
    id: number,
    data: UpdateCourseSubcategoryRequest
  ): Promise<CourseSubcategory> {
    return this.fetchApi<CourseSubcategory>(API_ENDPOINTS.courseSubcategories.update(id), {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async deleteCourseSubcategory(id: number): Promise<CourseSubcategory> {
    return this.fetchApi<CourseSubcategory>(API_ENDPOINTS.courseSubcategories.delete(id), {
      method: 'DELETE',
    });
  }

  // Verify if a session exists
  private async verifySession(sessionId: string): Promise<boolean> {
    try {
      await this.getOnboardingProgress(sessionId);
      return true;
    } catch (error) {
      if (error instanceof Error && error.message.includes('not found')) {
        return false;
      }
      throw error;
    }
  }

  // Create onboarding progress
  async createOnboardingProgress(data: CreateOnboardingProgressRequest): Promise<OnboardingProgressResponse> {
    console.log('Creating onboarding progress with data:', data);
    return this.fetchApi<OnboardingProgressResponse>(API_ENDPOINTS.onboarding.create, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  // Update onboarding progress with verification and retry
  async updateOnboardingProgress(sessionId: string, data: UpdateOnboardingProgressRequest): Promise<OnboardingProgressResponse> {
    if (!sessionId) {
      throw new Error('sessionId is required for updating onboarding progress');
    }

    console.log('Updating onboarding progress:', { sessionId, data });

    // First verify session exists
    const sessionExists = await this.verifySession(sessionId);
    if (!sessionExists) {
      console.log('Session not found, creating new session');
      // Session doesn't exist, create it
      await this.createOnboardingProgress({
        session_id: sessionId,
        step_number: data.step_number,
        data: data.data,
        user_id: data.user_id
      });
    }

    try {
      return await this.fetchApi<OnboardingProgressResponse>(API_ENDPOINTS.onboarding.update(sessionId), {
        method: 'PUT',
        body: JSON.stringify({
          session_id: sessionId, // Must match URL parameter
          step_number: data.step_number,
          data: data.data,
          user_id: data.user_id
        }),
      });
    } catch (error) {
      if (error instanceof Error && error.message.includes('not found')) {
        // Session was lost, try to recreate and retry update
        console.log('Session lost during update, recreating');
        await this.createOnboardingProgress({
          session_id: sessionId,
          step_number: data.step_number,
          data: data.data,
          user_id: data.user_id
        });
        // Retry the update
        return this.updateOnboardingProgress(sessionId, data);
      }
      throw error;
    }
  }

  // Get onboarding progress by session ID
  async getOnboardingProgress(sessionId: string): Promise<OnboardingProgressResponse> {
    if (!sessionId) {
      throw new Error('sessionId is required for getting onboarding progress');
    }

    console.log('Getting onboarding progress for session:', sessionId);
    return this.fetchApi<OnboardingProgressResponse>(API_ENDPOINTS.onboarding.getBySessionId(sessionId));
  }

  // Get all onboarding progress
  async getAllOnboardingProgress(): Promise<OnboardingProgressResponse[]> {
    console.log('Getting all onboarding progress');
    return this.fetchApi<OnboardingProgressResponse[]>(API_ENDPOINTS.onboarding.getAll);
  }

  // Get onboarding progress by user ID
  async getOnboardingProgressByUserId(userId: string): Promise<OnboardingProgressResponse[]> {
    if (!userId) {
      throw new Error('userId is required for getting onboarding progress');
    }

    console.log('Getting onboarding progress for user:', userId);
    return this.fetchApi<OnboardingProgressResponse[]>(API_ENDPOINTS.onboarding.getByUserId(userId));
  }

  // Delete onboarding progress
  async deleteOnboardingProgress(sessionId: string): Promise<void> {
    if (!sessionId) {
      throw new Error('sessionId is required for deleting onboarding progress');
    }

    console.log('Deleting onboarding progress for session:', sessionId);
    return this.fetchApi<void>(API_ENDPOINTS.onboarding.delete(sessionId), {
      method: 'DELETE',
    });
  }
}

export const onboardingApiClient = new OnboardingApiClient(); 